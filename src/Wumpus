#!/usr/bin/java --source 17

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UncheckedIOException;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.random.RandomGenerator;
import java.util.stream.Collectors;

public class Wumpus {
  private final Game game = new Game();
  private RoomDescription room;

  public static void main(String[] args) {
    var wumpus = new Wumpus();
    wumpus.startGame();
    wumpus.describeRoom();
    while (true) {
      wumpus.movePlayer();
      wumpus.describeRoom();
    }
  }

  private void startGame(){
    System.out.println("Hunt the wumpus");
    System.out.println();
    game.start();
  }

  private void describeRoom() {
    room = game.describeRoom();
    printRoom();
    printTunnels();
    printWarnings();
  }

  private void printRoom() {
    System.out.println("You are in room " + room.number());
  }

  private void printTunnels() {
    var tunnels = room.tunnelsLeadTo().stream()
      .map(String::valueOf)
      .collect(Collectors.joining(", "));
    System.out.println("Tunnels lead to " + tunnels);
  }

  private void printWarnings() {
    for (var e : room.warnings()) {
      switch (e) {
        case WUMPUS -> System.out.println("I smell a wumpus!");
        case PIT -> System.out.println("I feel a draft");
        case BAT -> System.out.println("Bats nearby!");
      }
    }
  }

  private void movePlayer() {
    System.out.println("Where to");
    try {
      var reader = new BufferedReader(new InputStreamReader(System.in));
      while (true) {
        var s = reader.readLine();
        try {
          var i = Integer.parseInt(s);
          if (room.tunnelsLeadTo().contains(i)) {
            game.movePlayerTo(i);
            break;
          }
        } catch (NumberFormatException ignored) {
        }
        System.out.println("Not possible");
      }
    } catch (IOException e) {
      throw new UncheckedIOException(e);
    }
  }
}

class Game {
  private final Cave cave = new Cave();
  private final RandomGenerator randomGenerator = RandomGenerator.of("Xoroshiro128PlusPlus");

  void start() {
    do {
      positionPlayer();
      positionWumpus();
      positionPits();
      positionBats();
    } while (hasCrossovers());
  }

  private void positionPlayer() {
    cave.itemRooms.put(Item.PLAYER, randomRoom());
  }

  private void positionWumpus() {
    cave.itemRooms.put(Item.WUMPUS, randomRoom());
  }

  private void positionPits() {
    cave.itemRooms.put(Item.PIT_1, randomRoom());
    cave.itemRooms.put(Item.PIT_2, randomRoom());
  }

  private void positionBats() {
    cave.itemRooms.put(Item.BAT_1, randomRoom());
    cave.itemRooms.put(Item.BAT_2, randomRoom());
  }

  private boolean hasCrossovers() {
    for (var e1 : cave.itemRooms.entrySet()) {
      for (var e2 : cave.itemRooms.entrySet()) {
        if (e1.getKey() == e2.getKey()) {
          continue;
        }
        if (e1.getValue().equals(e2.getValue())) {
          return true;
        }
      }
    }
    return false;
  }

  private int randomRoom() {
    return randomGenerator.nextInt(1, 21);
  }

  void movePlayerTo(int room) {
    room = checkForBats(room);
    cave.itemRooms.put(Item.PLAYER, room);
  }

  private int checkForBats(int room) {
    if (room == cave.itemRooms.get(Item.BAT_1) || room == cave.itemRooms.get(Item.BAT_2)) {
      var i = room;
      do {
        i = randomRoom();
      } while (i == room);
      room = i;
    }
    return room;
  }

  void shootCrookedArrow() {}

  RoomDescription describeRoom() {
    var number = currentRoom();
    var tunnelsLeadTo = reachableRoomsFrom(number);
    var warnings = exploreRooms(tunnelsLeadTo);
    return new RoomDescription(number, tunnelsLeadTo, warnings);
  }

  private Integer currentRoom() {
    return cave.itemRooms.get(Item.PLAYER);
  }

  private Set<Integer> reachableRoomsFrom(int roomNumber) {
    return cave.rooms.get(roomNumber).tunnelsLeadTo;
  }

  private Set<Warning> exploreRooms(Set<Integer> numbers) {
    var warnings = new LinkedHashSet<Warning>();
    if (numbers.contains(cave.itemRooms.get(Item.WUMPUS))) {
      warnings.add(Warning.WUMPUS);
    }
    if (numbers.contains(cave.itemRooms.get(Item.PIT_1))
        || numbers.contains(cave.itemRooms.get(Item.PIT_2))) {
      warnings.add(Warning.PIT);
    }
    if (numbers.contains(cave.itemRooms.get(Item.BAT_1))
        || numbers.contains(cave.itemRooms.get(Item.BAT_2))) {
      warnings.add(Warning.BAT);
    }
    return Set.copyOf(warnings);
  }

  GameState determineGameState() {
    return null;
  }

  private static class Cave {
    final Map<Integer, Room> rooms;
    final Map<Item, Integer> itemRooms = new TreeMap<>();

    Cave() {
      var dodecahedron = new LinkedHashMap<Integer, Room>();
      dodecahedron.put(1, new Room(1, Set.of(2, 5, 8)));
      dodecahedron.put(2, new Room(2, Set.of(1, 3, 10)));
      dodecahedron.put(3, new Room(3, Set.of(2, 4, 12)));
      dodecahedron.put(4, new Room(4, Set.of(3, 5, 14)));
      dodecahedron.put(5, new Room(5, Set.of(1, 4, 6)));
      dodecahedron.put(6, new Room(6, Set.of(5, 7, 15)));
      dodecahedron.put(7, new Room(7, Set.of(6, 8, 17)));
      dodecahedron.put(8, new Room(8, Set.of(1, 7, 9)));
      dodecahedron.put(9, new Room(9, Set.of(8, 10, 18)));
      dodecahedron.put(10, new Room(10, Set.of(2, 9, 11)));
      dodecahedron.put(11, new Room(11, Set.of(10, 12, 19)));
      dodecahedron.put(12, new Room(12, Set.of(3, 11, 13)));
      dodecahedron.put(13, new Room(13, Set.of(12, 14, 20)));
      dodecahedron.put(14, new Room(14, Set.of(4, 13, 15)));
      dodecahedron.put(15, new Room(15, Set.of(6, 14, 16)));
      dodecahedron.put(16, new Room(16, Set.of(15, 17, 20)));
      dodecahedron.put(17, new Room(17, Set.of(7, 16, 18)));
      dodecahedron.put(18, new Room(18, Set.of(9, 17, 19)));
      dodecahedron.put(19, new Room(19, Set.of(11, 18, 20)));
      dodecahedron.put(20, new Room(20, Set.of(13, 16, 19)));
      rooms = Map.copyOf(dodecahedron);
    }
  }

  private static class Room {
    final int number;
    final Set<Integer> tunnelsLeadTo;

    Room(int number, Set<Integer> tunnelsLeadTo) {
      this.number = number;
      this.tunnelsLeadTo = tunnelsLeadTo;
    }
  }

  private enum Item {
    PLAYER,
    WUMPUS,
    PIT_1,
    PIT_2,
    BAT_1,
    BAT_2,
  }
}

record RoomDescription(int number, Set<Integer> tunnelsLeadTo, Set<Warning> warnings) {}

enum Warning {
  WUMPUS,
  PIT,
  BAT,
}

record GameState() {}

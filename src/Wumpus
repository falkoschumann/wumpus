#!/usr/bin/java --source 17

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UncheckedIOException;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.random.RandomGenerator;
import java.util.stream.Collectors;

public class Wumpus {
  private final Game game = new Game();
  private RoomDescription room;

  public static void main(String[] args) {
    var wumpus = new Wumpus();
    wumpus.startGame();
    wumpus.describeRoom();
    while (true) {
      wumpus.movePlayer();
      wumpus.describeRoom();
    }
  }

  private void startGame(){
    System.out.println("Hunt the wumpus");
    System.out.println();
    game.start();
  }

  private void describeRoom() {
    room = game.describeRoom();
    printCurrentRoom();
    printTunnelsFor();
    printWarningsFor();
  }

  private void printCurrentRoom() {
    System.out.println("You are in room " + room.number());
  }

  private void printTunnelsFor() {
    var tunnels = room.tunnelsLeadTo().stream()
      .map(String::valueOf)
      .collect(Collectors.joining(", "));
    System.out.println("Tunnels lead to " + tunnels);
  }

  private void printWarningsFor() {
    for (var e : room.warnings()) {
      switch (e) {
        case WUMPUS -> System.out.println("I smell a wumpus!");
        case BOTTOMLESS_PIT -> System.out.println("I feel a draft");
        case SUPER_BAT -> System.out.println("Bats nearby!");
      }
    }
  }

  private void movePlayer() {
    System.out.println("Where to");
    try {
      var reader = new BufferedReader(new InputStreamReader(System.in));
      while (true) {
        var s = reader.readLine();
        try {
          var i = Integer.parseInt(s);
          if (room.tunnelsLeadTo().contains(i)) {
            game.movePlayerTo(i);
            break;
          }
        } catch (NumberFormatException ignored) {
        }
        System.out.println("Not possible");
      }
    } catch (IOException e) {
      throw new UncheckedIOException(e);
    }
  }
}

class Game {
  // Cave:
  // - List of rooms
  // - List index matches room number - 1
  // - Each room defines its adjacent rooms
  private final List<Set<Integer>> cave = List.of(
    Set.of(2, 5, 8),
    Set.of(1, 3, 10),
    Set.of(2, 4, 12),
    Set.of(3, 5, 14),
    Set.of(1, 4, 6),
    Set.of(5, 7, 15),
    Set.of(6, 8, 17),
    Set.of(1, 7, 9),
    Set.of(8, 10, 18),
    Set.of(2, 9, 11),
    Set.of(10, 12, 19),
    Set.of(3, 11, 13),
    Set.of(12, 14, 20),
    Set.of(4, 13, 15),
    Set.of(6, 14, 16),
    Set.of(15, 17, 20),
    Set.of(7, 16, 18),
    Set.of(9, 17, 19),
    Set.of(11, 18, 20),
    Set.of(13, 16, 19)
  );

  // Items: Maps a game item to a room
  private enum Item {
    PLAYER,
    WUMPUS,
    BOTTOMLESS_PIT_1,
    BOTTOMLESS_PIT_2,
    SUPER_BAT_1,
    SUPER_BAT_2,
  }
  private final Map<Item, Integer> items = new LinkedHashMap<>();

  private final RandomGenerator randomGenerator = RandomGenerator.of("Xoroshiro128PlusPlus");

  void start() {
    do {
      positionPlayer();
      positionWumpus();
      positionBottomlessPits();
      positionSuperBats();
    } while (checkForCrossovers());
  }

  private void positionPlayer() {
    items.put(Item.PLAYER, randomRoom());
  }

  private void positionWumpus() {
    items.put(Item.WUMPUS, randomRoom());
  }

  private void positionBottomlessPits() {
    items.put(Item.BOTTOMLESS_PIT_1, randomRoom());
    items.put(Item.BOTTOMLESS_PIT_2, randomRoom());
  }

  private void positionSuperBats() {
    items.put(Item.SUPER_BAT_1, randomRoom());
    items.put(Item.SUPER_BAT_2, randomRoom());
  }

  private boolean checkForCrossovers() {
    for (var e1 : items.entrySet()) {
      for (var e2 : items.entrySet()) {
        if (e1.getKey() == e2.getKey()) {
          continue;
        }
        if (e1.getValue().equals(e2.getValue())) {
          return true;
        }
      }
    }
    return false;
  }

  private int randomRoom() {
    return randomGenerator.nextInt(1, 21);
  }

  void movePlayerTo(int room) {
    room = checkForSuperBats(room);
    items.put(Item.PLAYER, room);
  }

  private int checkForSuperBats(int room) {
    if (room == items.get(Item.SUPER_BAT_1) || room == items.get(Item.SUPER_BAT_2)) {
      var i = room;
      do {
        i = randomRoom();
      } while (i == room);
      room = i;
    }
    return room;
  }

  void shootCrookedArrow() {}

  RoomDescription describeRoom() {
    var number = items.get(Item.PLAYER);
    var tunnelsLeadTo = reachableRoomsFrom(number);
    var warnings = exploreRooms(tunnelsLeadTo);
    return new RoomDescription(number, tunnelsLeadTo, warnings);
  }

  private Set<Integer> reachableRoomsFrom(int roomNumber) {
    return cave.get(roomNumber - 1);
  }

  private Set<Warning> exploreRooms(Set<Integer> numbers) {
    var warnings = new LinkedHashSet<Warning>();
    if (numbers.contains(items.get(Item.WUMPUS))) {
      warnings.add(Warning.WUMPUS);
    }
    if (numbers.contains(items.get(Item.BOTTOMLESS_PIT_1))
        || numbers.contains(items.get(Item.BOTTOMLESS_PIT_2))) {
      warnings.add(Warning.BOTTOMLESS_PIT);
    }
    if (numbers.contains(items.get(Item.SUPER_BAT_1))
        || numbers.contains(items.get(Item.SUPER_BAT_2))) {
      warnings.add(Warning.SUPER_BAT);
    }
    return Set.copyOf(warnings);
  }

  GameState determineState() {
    return null;
  }
}

record RoomDescription(int number, Set<Integer> tunnelsLeadTo, Set<Warning> warnings) {}

enum Warning {
  WUMPUS,
  BOTTOMLESS_PIT,
  SUPER_BAT,
}

record GameState() {}
